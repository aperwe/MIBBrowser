/*
 *
 * Copyright (C) 1992-1998 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o v2 -test_and_incr -parser -row_status -userpart -storage_type 
 * -ansi 
 */

/* $Id: v2part.h,v 1.4 1998/01/07 22:04:16 mark Exp $ */

/*
 * File Description:
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_V2PART_H
#define SR_V2PART_H


#ifdef __cplusplus
extern "C" {
#endif

/* only define name strings if we are not compiling LIGHT */
#ifndef LIGHT
#define STdeclare(name, value) static const char name [] = value;
#else	/* LIGHT */
#define STdeclare(name, value)
#endif	/* LIGHT */

/* define the OID components of the OID call table */

#if defined(N_iso)
#ifdef SNMPPART_DECL
const SR_UINT32 IDiso[] = { 1 };
#else
extern const SR_UINT32 IDiso[];
#endif	/* SNMPPART_DECL */
#define LNiso 1
#endif	/* defined(N_iso) */


#if defined(N_org)
#ifdef SNMPPART_DECL
const SR_UINT32 IDorg[] = { 1, 3 };
#else
extern const SR_UINT32 IDorg[];
#endif	/* SNMPPART_DECL */
#define LNorg 2
#endif	/* defined(N_org) */


#if defined(N_dod)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdod[] = { 1, 3, 6 };
#else
extern const SR_UINT32 IDdod[];
#endif	/* SNMPPART_DECL */
#define LNdod 3
#endif	/* defined(N_dod) */


#if defined(N_internet)
#ifdef SNMPPART_DECL
const SR_UINT32 IDinternet[] = { 1, 3, 6, 1 };
#else
extern const SR_UINT32 IDinternet[];
#endif	/* SNMPPART_DECL */
#define LNinternet 4
#endif	/* defined(N_internet) */


#if defined(N_directory)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdirectory[] = { 1, 3, 6, 1, 1 };
#else
extern const SR_UINT32 IDdirectory[];
#endif	/* SNMPPART_DECL */
#define LNdirectory 5
#endif	/* defined(N_directory) */


#if defined(N_mgmt)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmgmt[] = { 1, 3, 6, 1, 2 };
#else
extern const SR_UINT32 IDmgmt[];
#endif	/* SNMPPART_DECL */
#define LNmgmt 5
#endif	/* defined(N_mgmt) */


#if defined(N_mib_2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmib_2[] = { 1, 3, 6, 1, 2, 1 };
#else
extern const SR_UINT32 IDmib_2[];
#endif	/* SNMPPART_DECL */
#define LNmib_2 6
#endif	/* defined(N_mib_2) */


#if defined(N_transmission)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtransmission[] = { 1, 3, 6, 1, 2, 1, 10 };
#else
extern const SR_UINT32 IDtransmission[];
#endif	/* SNMPPART_DECL */
#define LNtransmission 7
#endif	/* defined(N_transmission) */


#if defined(N_experimental)
#ifdef SNMPPART_DECL
const SR_UINT32 IDexperimental[] = { 1, 3, 6, 1, 3 };
#else
extern const SR_UINT32 IDexperimental[];
#endif	/* SNMPPART_DECL */
#define LNexperimental 5
#endif	/* defined(N_experimental) */


#if defined(N_private)
#ifdef SNMPPART_DECL
const SR_UINT32 IDprivate[] = { 1, 3, 6, 1, 4 };
#else
extern const SR_UINT32 IDprivate[];
#endif	/* SNMPPART_DECL */
#define LNprivate 5
#endif	/* defined(N_private) */


#if defined(N_enterprises)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterprises[] = { 1, 3, 6, 1, 4, 1 };
#else
extern const SR_UINT32 IDenterprises[];
#endif	/* SNMPPART_DECL */
#define LNenterprises 6
#endif	/* defined(N_enterprises) */


#if defined(N_snmpResearch)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearch[] = { 1, 3, 6, 1, 4, 1, 99 };
#else
extern const SR_UINT32 IDsnmpResearch[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearch 7
#endif	/* defined(N_snmpResearch) */


#if defined(N_security)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsecurity[] = { 1, 3, 6, 1, 5 };
#else
extern const SR_UINT32 IDsecurity[];
#endif	/* SNMPPART_DECL */
#define LNsecurity 5
#endif	/* defined(N_security) */


#if defined(N_snmpV2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpV2[] = { 1, 3, 6, 1, 6 };
#else
extern const SR_UINT32 IDsnmpV2[];
#endif	/* SNMPPART_DECL */
#define LNsnmpV2 5
#endif	/* defined(N_snmpV2) */


#if defined(N_snmpDomains)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpDomains[] = { 1, 3, 6, 1, 6, 1 };
#else
extern const SR_UINT32 IDsnmpDomains[];
#endif	/* SNMPPART_DECL */
#define LNsnmpDomains 6
#endif	/* defined(N_snmpDomains) */


#if defined(N_snmpProxys)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpProxys[] = { 1, 3, 6, 1, 6, 2 };
#else
extern const SR_UINT32 IDsnmpProxys[];
#endif	/* SNMPPART_DECL */
#define LNsnmpProxys 6
#endif	/* defined(N_snmpProxys) */


#if defined(N_snmpModules)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpModules[] = { 1, 3, 6, 1, 6, 3 };
#else
extern const SR_UINT32 IDsnmpModules[];
#endif	/* SNMPPART_DECL */
#define LNsnmpModules 6
#endif	/* defined(N_snmpModules) */


#if defined(N_srCommunityMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsrCommunityMIB[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33 };
#else
extern const SR_UINT32 IDsrCommunityMIB[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityMIB 9
#endif	/* defined(N_srCommunityMIB) */


#if defined(I_srCommunitySpinLock)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunitySpinLock, "srCommunitySpinLock")
const SR_UINT32 IDsrCommunitySpinLock[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 1 };
#else
extern const SR_UINT32 IDsrCommunitySpinLock[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunitySpinLock 10
#endif	/* defined(I_srCommunitySpinLock) */




#if defined(I_srCommunityAuthSnmpID)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityAuthSnmpID, "srCommunityAuthSnmpID")
const SR_UINT32 IDsrCommunityAuthSnmpID[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 1 };
#else
extern const SR_UINT32 IDsrCommunityAuthSnmpID[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityAuthSnmpID 12
#endif	/* defined(I_srCommunityAuthSnmpID) */



#if defined(I_srCommunityGroupName)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityGroupName, "srCommunityGroupName")
const SR_UINT32 IDsrCommunityGroupName[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 3 };
#else
extern const SR_UINT32 IDsrCommunityGroupName[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityGroupName 12
#endif	/* defined(I_srCommunityGroupName) */


#if defined(I_srCommunityContextSnmpID)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityContextSnmpID, "srCommunityContextSnmpID")
const SR_UINT32 IDsrCommunityContextSnmpID[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 4 };
#else
extern const SR_UINT32 IDsrCommunityContextSnmpID[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityContextSnmpID 12
#endif	/* defined(I_srCommunityContextSnmpID) */


#if defined(I_srCommunityContextName)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityContextName, "srCommunityContextName")
const SR_UINT32 IDsrCommunityContextName[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 5 };
#else
extern const SR_UINT32 IDsrCommunityContextName[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityContextName 12
#endif	/* defined(I_srCommunityContextName) */


#if defined(I_srCommunityTransportLabel)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityTransportLabel, "srCommunityTransportLabel")
const SR_UINT32 IDsrCommunityTransportLabel[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 6 };
#else
extern const SR_UINT32 IDsrCommunityTransportLabel[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityTransportLabel 12
#endif	/* defined(I_srCommunityTransportLabel) */


#if defined(I_srCommunityMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityMemoryType, "srCommunityMemoryType")
const SR_UINT32 IDsrCommunityMemoryType[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 7 };
#else
extern const SR_UINT32 IDsrCommunityMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityMemoryType 12
#endif	/* defined(I_srCommunityMemoryType) */


#if defined(I_srCommunityStatus)
#ifdef SNMPPART_DECL
STdeclare(STsrCommunityStatus, "srCommunityStatus")
const SR_UINT32 IDsrCommunityStatus[] = { 1, 3, 6, 1, 4, 1, 99, 12, 33, 2, 1, 8 };
#else
extern const SR_UINT32 IDsrCommunityStatus[];
#endif	/* SNMPPART_DECL */
#define LNsrCommunityStatus 12
#endif	/* defined(I_srCommunityStatus) */


#if defined(N_v2AdminMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIB[] = { 1, 3, 6, 1, 6, 3, 1134 };
#else
extern const SR_UINT32 IDv2AdminMIB[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIB 7
#endif	/* defined(N_v2AdminMIB) */


#if defined(N_v2AdminSnmpScalars)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminSnmpScalars[] = { 1, 3, 6, 1, 6, 3, 1134, 1 };
#else
extern const SR_UINT32 IDv2AdminSnmpScalars[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminSnmpScalars 8
#endif	/* defined(N_v2AdminSnmpScalars) */


#if defined(I_snmpID)
#ifdef SNMPPART_DECL
STdeclare(STsnmpID, "snmpID")
const SR_UINT32 IDsnmpID[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 1 };
#else
extern const SR_UINT32 IDsnmpID[];
#endif	/* SNMPPART_DECL */
#define LNsnmpID 9
#endif	/* defined(I_snmpID) */


#if defined(I_snmpMaxMessageSize)
#ifdef SNMPPART_DECL
STdeclare(STsnmpMaxMessageSize, "snmpMaxMessageSize")
const SR_UINT32 IDsnmpMaxMessageSize[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 3 };
#else
extern const SR_UINT32 IDsnmpMaxMessageSize[];
#endif	/* SNMPPART_DECL */
#define LNsnmpMaxMessageSize 9
#endif	/* defined(I_snmpMaxMessageSize) */


#if defined(I_maxIdentityNameLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxIdentityNameLength, "maxIdentityNameLength")
const SR_UINT32 IDmaxIdentityNameLength[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 4 };
#else
extern const SR_UINT32 IDmaxIdentityNameLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxIdentityNameLength 9
#endif	/* defined(I_maxIdentityNameLength) */


#if defined(I_maxGroupNameLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxGroupNameLength, "maxGroupNameLength")
const SR_UINT32 IDmaxGroupNameLength[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 5 };
#else
extern const SR_UINT32 IDmaxGroupNameLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxGroupNameLength 9
#endif	/* defined(I_maxGroupNameLength) */


#if defined(I_maxV2ContextNameLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxV2ContextNameLength, "maxV2ContextNameLength")
const SR_UINT32 IDmaxV2ContextNameLength[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 6 };
#else
extern const SR_UINT32 IDmaxV2ContextNameLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxV2ContextNameLength 9
#endif	/* defined(I_maxV2ContextNameLength) */


#if defined(I_maxViewTreeNameLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxViewTreeNameLength, "maxViewTreeNameLength")
const SR_UINT32 IDmaxViewTreeNameLength[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 7 };
#else
extern const SR_UINT32 IDmaxViewTreeNameLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxViewTreeNameLength 9
#endif	/* defined(I_maxViewTreeNameLength) */


#if defined(I_maxTransportLabelLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxTransportLabelLength, "maxTransportLabelLength")
const SR_UINT32 IDmaxTransportLabelLength[] = { 1, 3, 6, 1, 6, 3, 1134, 1, 8 };
#else
extern const SR_UINT32 IDmaxTransportLabelLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxTransportLabelLength 9
#endif	/* defined(I_maxTransportLabelLength) */


#if defined(N_v2AdminStats)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminStats[] = { 1, 3, 6, 1, 6, 3, 1134, 2 };
#else
extern const SR_UINT32 IDv2AdminStats[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminStats 8
#endif	/* defined(N_v2AdminStats) */


#if defined(I_v2AdminStatsUnknownSPIs)
#ifdef SNMPPART_DECL
STdeclare(STv2AdminStatsUnknownSPIs, "v2AdminStatsUnknownSPIs")
const SR_UINT32 IDv2AdminStatsUnknownSPIs[] = { 1, 3, 6, 1, 6, 3, 1134, 2, 1 };
#else
extern const SR_UINT32 IDv2AdminStatsUnknownSPIs[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminStatsUnknownSPIs 9
#endif	/* defined(I_v2AdminStatsUnknownSPIs) */


#if defined(I_v2AdminStatsUnknownContexts)
#ifdef SNMPPART_DECL
STdeclare(STv2AdminStatsUnknownContexts, "v2AdminStatsUnknownContexts")
const SR_UINT32 IDv2AdminStatsUnknownContexts[] = { 1, 3, 6, 1, 6, 3, 1134, 2, 2 };
#else
extern const SR_UINT32 IDv2AdminStatsUnknownContexts[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminStatsUnknownContexts 9
#endif	/* defined(I_v2AdminStatsUnknownContexts) */


#if defined(I_v2AdminStatsUnavailableContexts)
#ifdef SNMPPART_DECL
STdeclare(STv2AdminStatsUnavailableContexts, "v2AdminStatsUnavailableContexts")
const SR_UINT32 IDv2AdminStatsUnavailableContexts[] = { 1, 3, 6, 1, 6, 3, 1134, 2, 3 };
#else
extern const SR_UINT32 IDv2AdminStatsUnavailableContexts[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminStatsUnavailableContexts 9
#endif	/* defined(I_v2AdminStatsUnavailableContexts) */


#if defined(I_v2AdminStatsCacheMisses)
#ifdef SNMPPART_DECL
STdeclare(STv2AdminStatsCacheMisses, "v2AdminStatsCacheMisses")
const SR_UINT32 IDv2AdminStatsCacheMisses[] = { 1, 3, 6, 1, 6, 3, 1134, 2, 4 };
#else
extern const SR_UINT32 IDv2AdminStatsCacheMisses[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminStatsCacheMisses 9
#endif	/* defined(I_v2AdminStatsCacheMisses) */






#if defined(I_v2ContextLocalEntity)
#ifdef SNMPPART_DECL
STdeclare(STv2ContextLocalEntity, "v2ContextLocalEntity")
const SR_UINT32 IDv2ContextLocalEntity[] = { 1, 3, 6, 1, 6, 3, 1134, 3, 1, 3 };
#else
extern const SR_UINT32 IDv2ContextLocalEntity[];
#endif	/* SNMPPART_DECL */
#define LNv2ContextLocalEntity 10
#endif	/* defined(I_v2ContextLocalEntity) */


#if defined(I_v2ContextLocalTime)
#ifdef SNMPPART_DECL
STdeclare(STv2ContextLocalTime, "v2ContextLocalTime")
const SR_UINT32 IDv2ContextLocalTime[] = { 1, 3, 6, 1, 6, 3, 1134, 3, 1, 4 };
#else
extern const SR_UINT32 IDv2ContextLocalTime[];
#endif	/* SNMPPART_DECL */
#define LNv2ContextLocalTime 10
#endif	/* defined(I_v2ContextLocalTime) */


#if defined(I_v2ContextMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STv2ContextMemoryType, "v2ContextMemoryType")
const SR_UINT32 IDv2ContextMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 3, 1, 5 };
#else
extern const SR_UINT32 IDv2ContextMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNv2ContextMemoryType 10
#endif	/* defined(I_v2ContextMemoryType) */


#if defined(I_v2ContextStatus)
#ifdef SNMPPART_DECL
STdeclare(STv2ContextStatus, "v2ContextStatus")
const SR_UINT32 IDv2ContextStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 3, 1, 6 };
#else
extern const SR_UINT32 IDv2ContextStatus[];
#endif	/* SNMPPART_DECL */
#define LNv2ContextStatus 10
#endif	/* defined(I_v2ContextStatus) */


#if defined(N_v2AdminViewTree)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminViewTree[] = { 1, 3, 6, 1, 6, 3, 1134, 4 };
#else
extern const SR_UINT32 IDv2AdminViewTree[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminViewTree 8
#endif	/* defined(N_v2AdminViewTree) */


#if defined(I_viewTreeSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STviewTreeSpinLock, "viewTreeSpinLock")
const SR_UINT32 IDviewTreeSpinLock[] = { 1, 3, 6, 1, 6, 3, 1134, 4, 1 };
#else
extern const SR_UINT32 IDviewTreeSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNviewTreeSpinLock 9
#endif	/* defined(I_viewTreeSpinLock) */






#if defined(I_viewTreeMask)
#ifdef SNMPPART_DECL
STdeclare(STviewTreeMask, "viewTreeMask")
const SR_UINT32 IDviewTreeMask[] = { 1, 3, 6, 1, 6, 3, 1134, 4, 2, 1, 3 };
#else
extern const SR_UINT32 IDviewTreeMask[];
#endif	/* SNMPPART_DECL */
#define LNviewTreeMask 11
#endif	/* defined(I_viewTreeMask) */


#if defined(I_viewTreeType)
#ifdef SNMPPART_DECL
STdeclare(STviewTreeType, "viewTreeType")
const SR_UINT32 IDviewTreeType[] = { 1, 3, 6, 1, 6, 3, 1134, 4, 2, 1, 4 };
#else
extern const SR_UINT32 IDviewTreeType[];
#endif	/* SNMPPART_DECL */
#define LNviewTreeType 11
#endif	/* defined(I_viewTreeType) */


#if defined(I_viewTreeMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STviewTreeMemoryType, "viewTreeMemoryType")
const SR_UINT32 IDviewTreeMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 4, 2, 1, 5 };
#else
extern const SR_UINT32 IDviewTreeMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNviewTreeMemoryType 11
#endif	/* defined(I_viewTreeMemoryType) */


#if defined(I_viewTreeStatus)
#ifdef SNMPPART_DECL
STdeclare(STviewTreeStatus, "viewTreeStatus")
const SR_UINT32 IDviewTreeStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 4, 2, 1, 6 };
#else
extern const SR_UINT32 IDviewTreeStatus[];
#endif	/* SNMPPART_DECL */
#define LNviewTreeStatus 11
#endif	/* defined(I_viewTreeStatus) */


#if defined(N_v2AdminAccessControl)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminAccessControl[] = { 1, 3, 6, 1, 6, 3, 1134, 5 };
#else
extern const SR_UINT32 IDv2AdminAccessControl[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminAccessControl 8
#endif	/* defined(N_v2AdminAccessControl) */


#if defined(I_acSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STacSpinLock, "acSpinLock")
const SR_UINT32 IDacSpinLock[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 1 };
#else
extern const SR_UINT32 IDacSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNacSpinLock 9
#endif	/* defined(I_acSpinLock) */







#if defined(I_acContextNameMask)
#ifdef SNMPPART_DECL
STdeclare(STacContextNameMask, "acContextNameMask")
const SR_UINT32 IDacContextNameMask[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 4 };
#else
extern const SR_UINT32 IDacContextNameMask[];
#endif	/* SNMPPART_DECL */
#define LNacContextNameMask 11
#endif	/* defined(I_acContextNameMask) */


#if defined(I_acPrivs)
#ifdef SNMPPART_DECL
STdeclare(STacPrivs, "acPrivs")
const SR_UINT32 IDacPrivs[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 5 };
#else
extern const SR_UINT32 IDacPrivs[];
#endif	/* SNMPPART_DECL */
#define LNacPrivs 11
#endif	/* defined(I_acPrivs) */


#if defined(I_acReadViewName)
#ifdef SNMPPART_DECL
STdeclare(STacReadViewName, "acReadViewName")
const SR_UINT32 IDacReadViewName[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 6 };
#else
extern const SR_UINT32 IDacReadViewName[];
#endif	/* SNMPPART_DECL */
#define LNacReadViewName 11
#endif	/* defined(I_acReadViewName) */


#if defined(I_acWriteViewName)
#ifdef SNMPPART_DECL
STdeclare(STacWriteViewName, "acWriteViewName")
const SR_UINT32 IDacWriteViewName[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 7 };
#else
extern const SR_UINT32 IDacWriteViewName[];
#endif	/* SNMPPART_DECL */
#define LNacWriteViewName 11
#endif	/* defined(I_acWriteViewName) */


#if defined(I_acMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STacMemoryType, "acMemoryType")
const SR_UINT32 IDacMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 8 };
#else
extern const SR_UINT32 IDacMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNacMemoryType 11
#endif	/* defined(I_acMemoryType) */


#if defined(I_acStatus)
#ifdef SNMPPART_DECL
STdeclare(STacStatus, "acStatus")
const SR_UINT32 IDacStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 5, 2, 1, 9 };
#else
extern const SR_UINT32 IDacStatus[];
#endif	/* SNMPPART_DECL */
#define LNacStatus 11
#endif	/* defined(I_acStatus) */


#if defined(N_v2AdminTransport)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminTransport[] = { 1, 3, 6, 1, 6, 3, 1134, 6 };
#else
extern const SR_UINT32 IDv2AdminTransport[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminTransport 8
#endif	/* defined(N_v2AdminTransport) */


#if defined(I_transportSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STtransportSpinLock, "transportSpinLock")
const SR_UINT32 IDtransportSpinLock[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 1 };
#else
extern const SR_UINT32 IDtransportSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNtransportSpinLock 9
#endif	/* defined(I_transportSpinLock) */






#if defined(I_transportDomain)
#ifdef SNMPPART_DECL
STdeclare(STtransportDomain, "transportDomain")
const SR_UINT32 IDtransportDomain[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 3 };
#else
extern const SR_UINT32 IDtransportDomain[];
#endif	/* SNMPPART_DECL */
#define LNtransportDomain 11
#endif	/* defined(I_transportDomain) */


#if defined(I_transportAddress)
#ifdef SNMPPART_DECL
STdeclare(STtransportAddress, "transportAddress")
const SR_UINT32 IDtransportAddress[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 4 };
#else
extern const SR_UINT32 IDtransportAddress[];
#endif	/* SNMPPART_DECL */
#define LNtransportAddress 11
#endif	/* defined(I_transportAddress) */


#if defined(I_transportReceiveMask)
#ifdef SNMPPART_DECL
STdeclare(STtransportReceiveMask, "transportReceiveMask")
const SR_UINT32 IDtransportReceiveMask[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 5 };
#else
extern const SR_UINT32 IDtransportReceiveMask[];
#endif	/* SNMPPART_DECL */
#define LNtransportReceiveMask 11
#endif	/* defined(I_transportReceiveMask) */


#if defined(I_transportMMS)
#ifdef SNMPPART_DECL
STdeclare(STtransportMMS, "transportMMS")
const SR_UINT32 IDtransportMMS[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 6 };
#else
extern const SR_UINT32 IDtransportMMS[];
#endif	/* SNMPPART_DECL */
#define LNtransportMMS 11
#endif	/* defined(I_transportMMS) */


#if defined(I_transportMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STtransportMemoryType, "transportMemoryType")
const SR_UINT32 IDtransportMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 7 };
#else
extern const SR_UINT32 IDtransportMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNtransportMemoryType 11
#endif	/* defined(I_transportMemoryType) */


#if defined(I_transportStatus)
#ifdef SNMPPART_DECL
STdeclare(STtransportStatus, "transportStatus")
const SR_UINT32 IDtransportStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 6, 3, 1, 8 };
#else
extern const SR_UINT32 IDtransportStatus[];
#endif	/* SNMPPART_DECL */
#define LNtransportStatus 11
#endif	/* defined(I_transportStatus) */


#if defined(N_v2AdminNotify)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminNotify[] = { 1, 3, 6, 1, 6, 3, 1134, 7 };
#else
extern const SR_UINT32 IDv2AdminNotify[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminNotify 8
#endif	/* defined(N_v2AdminNotify) */


#if defined(I_notifySpinLock)
#ifdef SNMPPART_DECL
STdeclare(STnotifySpinLock, "notifySpinLock")
const SR_UINT32 IDnotifySpinLock[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 1 };
#else
extern const SR_UINT32 IDnotifySpinLock[];
#endif	/* SNMPPART_DECL */
#define LNnotifySpinLock 9
#endif	/* defined(I_notifySpinLock) */





#if defined(I_notifySPI)
#ifdef SNMPPART_DECL
STdeclare(STnotifySPI, "notifySPI")
const SR_UINT32 IDnotifySPI[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 2 };
#else
extern const SR_UINT32 IDnotifySPI[];
#endif	/* SNMPPART_DECL */
#define LNnotifySPI 11
#endif	/* defined(I_notifySPI) */


#if defined(I_notifyIdentityName)
#ifdef SNMPPART_DECL
STdeclare(STnotifyIdentityName, "notifyIdentityName")
const SR_UINT32 IDnotifyIdentityName[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 3 };
#else
extern const SR_UINT32 IDnotifyIdentityName[];
#endif	/* SNMPPART_DECL */
#define LNnotifyIdentityName 11
#endif	/* defined(I_notifyIdentityName) */


#if defined(I_notifyTransportLabel)
#ifdef SNMPPART_DECL
STdeclare(STnotifyTransportLabel, "notifyTransportLabel")
const SR_UINT32 IDnotifyTransportLabel[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 4 };
#else
extern const SR_UINT32 IDnotifyTransportLabel[];
#endif	/* SNMPPART_DECL */
#define LNnotifyTransportLabel 11
#endif	/* defined(I_notifyTransportLabel) */


#if defined(I_notifyContextName)
#ifdef SNMPPART_DECL
STdeclare(STnotifyContextName, "notifyContextName")
const SR_UINT32 IDnotifyContextName[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 5 };
#else
extern const SR_UINT32 IDnotifyContextName[];
#endif	/* SNMPPART_DECL */
#define LNnotifyContextName 11
#endif	/* defined(I_notifyContextName) */


#if defined(I_notifyViewName)
#ifdef SNMPPART_DECL
STdeclare(STnotifyViewName, "notifyViewName")
const SR_UINT32 IDnotifyViewName[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 6 };
#else
extern const SR_UINT32 IDnotifyViewName[];
#endif	/* SNMPPART_DECL */
#define LNnotifyViewName 11
#endif	/* defined(I_notifyViewName) */


#if defined(I_notifyMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STnotifyMemoryType, "notifyMemoryType")
const SR_UINT32 IDnotifyMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 7 };
#else
extern const SR_UINT32 IDnotifyMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNnotifyMemoryType 11
#endif	/* defined(I_notifyMemoryType) */


#if defined(I_notifyStatus)
#ifdef SNMPPART_DECL
STdeclare(STnotifyStatus, "notifyStatus")
const SR_UINT32 IDnotifyStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 2, 1, 8 };
#else
extern const SR_UINT32 IDnotifyStatus[];
#endif	/* SNMPPART_DECL */
#define LNnotifyStatus 11
#endif	/* defined(I_notifyStatus) */




#if defined(I_notifyConfirm)
#ifdef SNMPPART_DECL
STdeclare(STnotifyConfirm, "notifyConfirm")
const SR_UINT32 IDnotifyConfirm[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 3, 1, 1 };
#else
extern const SR_UINT32 IDnotifyConfirm[];
#endif	/* SNMPPART_DECL */
#define LNnotifyConfirm 11
#endif	/* defined(I_notifyConfirm) */


#if defined(I_notifyAuthSnmpID)
#ifdef SNMPPART_DECL
STdeclare(STnotifyAuthSnmpID, "notifyAuthSnmpID")
const SR_UINT32 IDnotifyAuthSnmpID[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 3, 1, 2 };
#else
extern const SR_UINT32 IDnotifyAuthSnmpID[];
#endif	/* SNMPPART_DECL */
#define LNnotifyAuthSnmpID 11
#endif	/* defined(I_notifyAuthSnmpID) */


#if defined(I_notifyTimeout)
#ifdef SNMPPART_DECL
STdeclare(STnotifyTimeout, "notifyTimeout")
const SR_UINT32 IDnotifyTimeout[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 3, 1, 3 };
#else
extern const SR_UINT32 IDnotifyTimeout[];
#endif	/* SNMPPART_DECL */
#define LNnotifyTimeout 11
#endif	/* defined(I_notifyTimeout) */


#if defined(I_notifyMaxRetry)
#ifdef SNMPPART_DECL
STdeclare(STnotifyMaxRetry, "notifyMaxRetry")
const SR_UINT32 IDnotifyMaxRetry[] = { 1, 3, 6, 1, 6, 3, 1134, 7, 3, 1, 4 };
#else
extern const SR_UINT32 IDnotifyMaxRetry[];
#endif	/* SNMPPART_DECL */
#define LNnotifyMaxRetry 11
#endif	/* defined(I_notifyMaxRetry) */


#if defined(N_v2AdminProxy)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminProxy[] = { 1, 3, 6, 1, 6, 3, 1134, 8 };
#else
extern const SR_UINT32 IDv2AdminProxy[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminProxy 8
#endif	/* defined(N_v2AdminProxy) */





#if defined(I_proxyType)
#ifdef SNMPPART_DECL
STdeclare(STproxyType, "proxyType")
const SR_UINT32 IDproxyType[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 2 };
#else
extern const SR_UINT32 IDproxyType[];
#endif	/* SNMPPART_DECL */
#define LNproxyType 11
#endif	/* defined(I_proxyType) */


#if defined(I_proxySPIIn)
#ifdef SNMPPART_DECL
STdeclare(STproxySPIIn, "proxySPIIn")
const SR_UINT32 IDproxySPIIn[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 3 };
#else
extern const SR_UINT32 IDproxySPIIn[];
#endif	/* SNMPPART_DECL */
#define LNproxySPIIn 11
#endif	/* defined(I_proxySPIIn) */


#if defined(I_proxyAuthSnmpIDIn)
#ifdef SNMPPART_DECL
STdeclare(STproxyAuthSnmpIDIn, "proxyAuthSnmpIDIn")
const SR_UINT32 IDproxyAuthSnmpIDIn[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 4 };
#else
extern const SR_UINT32 IDproxyAuthSnmpIDIn[];
#endif	/* SNMPPART_DECL */
#define LNproxyAuthSnmpIDIn 11
#endif	/* defined(I_proxyAuthSnmpIDIn) */


#if defined(I_proxyIdentityNameIn)
#ifdef SNMPPART_DECL
STdeclare(STproxyIdentityNameIn, "proxyIdentityNameIn")
const SR_UINT32 IDproxyIdentityNameIn[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 5 };
#else
extern const SR_UINT32 IDproxyIdentityNameIn[];
#endif	/* SNMPPART_DECL */
#define LNproxyIdentityNameIn 11
#endif	/* defined(I_proxyIdentityNameIn) */


#if defined(I_proxyContextSnmpIDIn)
#ifdef SNMPPART_DECL
STdeclare(STproxyContextSnmpIDIn, "proxyContextSnmpIDIn")
const SR_UINT32 IDproxyContextSnmpIDIn[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 6 };
#else
extern const SR_UINT32 IDproxyContextSnmpIDIn[];
#endif	/* SNMPPART_DECL */
#define LNproxyContextSnmpIDIn 11
#endif	/* defined(I_proxyContextSnmpIDIn) */


#if defined(I_proxyContextNameIn)
#ifdef SNMPPART_DECL
STdeclare(STproxyContextNameIn, "proxyContextNameIn")
const SR_UINT32 IDproxyContextNameIn[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 7 };
#else
extern const SR_UINT32 IDproxyContextNameIn[];
#endif	/* SNMPPART_DECL */
#define LNproxyContextNameIn 11
#endif	/* defined(I_proxyContextNameIn) */


#if defined(I_proxySPIOut)
#ifdef SNMPPART_DECL
STdeclare(STproxySPIOut, "proxySPIOut")
const SR_UINT32 IDproxySPIOut[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 8 };
#else
extern const SR_UINT32 IDproxySPIOut[];
#endif	/* SNMPPART_DECL */
#define LNproxySPIOut 11
#endif	/* defined(I_proxySPIOut) */


#if defined(I_proxyIdentityNameOut)
#ifdef SNMPPART_DECL
STdeclare(STproxyIdentityNameOut, "proxyIdentityNameOut")
const SR_UINT32 IDproxyIdentityNameOut[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 10 };
#else
extern const SR_UINT32 IDproxyIdentityNameOut[];
#endif	/* SNMPPART_DECL */
#define LNproxyIdentityNameOut 11
#endif	/* defined(I_proxyIdentityNameOut) */


#if defined(I_proxyTransportLabelOut)
#ifdef SNMPPART_DECL
STdeclare(STproxyTransportLabelOut, "proxyTransportLabelOut")
const SR_UINT32 IDproxyTransportLabelOut[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 11 };
#else
extern const SR_UINT32 IDproxyTransportLabelOut[];
#endif	/* SNMPPART_DECL */
#define LNproxyTransportLabelOut 11
#endif	/* defined(I_proxyTransportLabelOut) */


#if defined(I_proxyMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STproxyMemoryType, "proxyMemoryType")
const SR_UINT32 IDproxyMemoryType[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 12 };
#else
extern const SR_UINT32 IDproxyMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNproxyMemoryType 11
#endif	/* defined(I_proxyMemoryType) */


#if defined(I_proxyStatus)
#ifdef SNMPPART_DECL
STdeclare(STproxyStatus, "proxyStatus")
const SR_UINT32 IDproxyStatus[] = { 1, 3, 6, 1, 6, 3, 1134, 8, 2, 1, 13 };
#else
extern const SR_UINT32 IDproxyStatus[];
#endif	/* SNMPPART_DECL */
#define LNproxyStatus 11
#endif	/* defined(I_proxyStatus) */


#if defined(N_v2AdminMIBConformance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBConformance[] = { 1, 3, 6, 1, 6, 3, 1134, 10 };
#else
extern const SR_UINT32 IDv2AdminMIBConformance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBConformance 8
#endif	/* defined(N_v2AdminMIBConformance) */


#if defined(N_v2AdminMIBCompliances)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBCompliances[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1 };
#else
extern const SR_UINT32 IDv2AdminMIBCompliances[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBCompliances 9
#endif	/* defined(N_v2AdminMIBCompliances) */


#if defined(N_v2AdminMIBBasicAgentCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBBasicAgentCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 1 };
#else
extern const SR_UINT32 IDv2AdminMIBBasicAgentCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBBasicAgentCompliance 10
#endif	/* defined(N_v2AdminMIBBasicAgentCompliance) */


#if defined(N_v2AdminMIBBasicAgentWithTransportCheckingCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBBasicAgentWithTransportCheckingCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 2 };
#else
extern const SR_UINT32 IDv2AdminMIBBasicAgentWithTransportCheckingCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBBasicAgentWithTransportCheckingCompliance 10
#endif	/* defined(N_v2AdminMIBBasicAgentWithTransportCheckingCompliance) */


#if defined(N_v2AdminMIBBasicAgentWithTrapsCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBBasicAgentWithTrapsCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 3 };
#else
extern const SR_UINT32 IDv2AdminMIBBasicAgentWithTrapsCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBBasicAgentWithTrapsCompliance 10
#endif	/* defined(N_v2AdminMIBBasicAgentWithTrapsCompliance) */


#if defined(N_v2AdminMIBBasicAgentWithProxyCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBBasicAgentWithProxyCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 4 };
#else
extern const SR_UINT32 IDv2AdminMIBBasicAgentWithProxyCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBBasicAgentWithProxyCompliance 10
#endif	/* defined(N_v2AdminMIBBasicAgentWithProxyCompliance) */


#if defined(N_v2AdminMIBBasicAgentWithTrapsAndProxyCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBBasicAgentWithTrapsAndProxyCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 5 };
#else
extern const SR_UINT32 IDv2AdminMIBBasicAgentWithTrapsAndProxyCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBBasicAgentWithTrapsAndProxyCompliance 10
#endif	/* defined(N_v2AdminMIBBasicAgentWithTrapsAndProxyCompliance) */


#if defined(N_v2AdminMIBDualRoleEntityCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBDualRoleEntityCompliance[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 1, 6 };
#else
extern const SR_UINT32 IDv2AdminMIBDualRoleEntityCompliance[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBDualRoleEntityCompliance 10
#endif	/* defined(N_v2AdminMIBDualRoleEntityCompliance) */


#if defined(N_v2AdminMIBGroups)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminMIBGroups[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2 };
#else
extern const SR_UINT32 IDv2AdminMIBGroups[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminMIBGroups 9
#endif	/* defined(N_v2AdminMIBGroups) */


#if defined(N_v2AdminBasicGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminBasicGroup[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2, 1 };
#else
extern const SR_UINT32 IDv2AdminBasicGroup[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminBasicGroup 10
#endif	/* defined(N_v2AdminBasicGroup) */


#if defined(N_v2AdminTransportGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminTransportGroup[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2, 2 };
#else
extern const SR_UINT32 IDv2AdminTransportGroup[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminTransportGroup 10
#endif	/* defined(N_v2AdminTransportGroup) */


#if defined(N_v2AdminTrapGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminTrapGroup[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2, 3 };
#else
extern const SR_UINT32 IDv2AdminTrapGroup[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminTrapGroup 10
#endif	/* defined(N_v2AdminTrapGroup) */


#if defined(N_v2AdminProxyGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminProxyGroup[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2, 4 };
#else
extern const SR_UINT32 IDv2AdminProxyGroup[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminProxyGroup 10
#endif	/* defined(N_v2AdminProxyGroup) */


#if defined(N_v2AdminInformGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDv2AdminInformGroup[] = { 1, 3, 6, 1, 6, 3, 1134, 10, 2, 5 };
#else
extern const SR_UINT32 IDv2AdminInformGroup[];
#endif	/* SNMPPART_DECL */
#define LNv2AdminInformGroup 10
#endif	/* defined(N_v2AdminInformGroup) */


#if defined(N_usecMIB)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIB[] = { 1, 3, 6, 1, 6, 3, 1135 };
#else
extern const SR_UINT32 IDusecMIB[];
#endif	/* SNMPPART_DECL */
#define LNusecMIB 7
#endif	/* defined(N_usecMIB) */


#if defined(N_usecScalars)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecScalars[] = { 1, 3, 6, 1, 6, 3, 1135, 1 };
#else
extern const SR_UINT32 IDusecScalars[];
#endif	/* SNMPPART_DECL */
#define LNusecScalars 8
#endif	/* defined(N_usecScalars) */


#if defined(I_snmpBoots)
#ifdef SNMPPART_DECL
STdeclare(STsnmpBoots, "snmpBoots")
const SR_UINT32 IDsnmpBoots[] = { 1, 3, 6, 1, 6, 3, 1135, 1, 1 };
#else
extern const SR_UINT32 IDsnmpBoots[];
#endif	/* SNMPPART_DECL */
#define LNsnmpBoots 9
#endif	/* defined(I_snmpBoots) */


#if defined(I_snmpTime)
#ifdef SNMPPART_DECL
STdeclare(STsnmpTime, "snmpTime")
const SR_UINT32 IDsnmpTime[] = { 1, 3, 6, 1, 6, 3, 1135, 1, 2 };
#else
extern const SR_UINT32 IDsnmpTime[];
#endif	/* SNMPPART_DECL */
#define LNsnmpTime 9
#endif	/* defined(I_snmpTime) */


#if defined(N_usecStats)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecStats[] = { 1, 3, 6, 1, 6, 3, 1135, 2 };
#else
extern const SR_UINT32 IDusecStats[];
#endif	/* SNMPPART_DECL */
#define LNusecStats 8
#endif	/* defined(N_usecStats) */


#if defined(I_usecStatsNotInTimeWindows)
#ifdef SNMPPART_DECL
STdeclare(STusecStatsNotInTimeWindows, "usecStatsNotInTimeWindows")
const SR_UINT32 IDusecStatsNotInTimeWindows[] = { 1, 3, 6, 1, 6, 3, 1135, 2, 1 };
#else
extern const SR_UINT32 IDusecStatsNotInTimeWindows[];
#endif	/* SNMPPART_DECL */
#define LNusecStatsNotInTimeWindows 9
#endif	/* defined(I_usecStatsNotInTimeWindows) */


#if defined(I_usecStatsUnknownUserNames)
#ifdef SNMPPART_DECL
STdeclare(STusecStatsUnknownUserNames, "usecStatsUnknownUserNames")
const SR_UINT32 IDusecStatsUnknownUserNames[] = { 1, 3, 6, 1, 6, 3, 1135, 2, 2 };
#else
extern const SR_UINT32 IDusecStatsUnknownUserNames[];
#endif	/* SNMPPART_DECL */
#define LNusecStatsUnknownUserNames 9
#endif	/* defined(I_usecStatsUnknownUserNames) */


#if defined(I_usecStatsWrongDigestValues)
#ifdef SNMPPART_DECL
STdeclare(STusecStatsWrongDigestValues, "usecStatsWrongDigestValues")
const SR_UINT32 IDusecStatsWrongDigestValues[] = { 1, 3, 6, 1, 6, 3, 1135, 2, 3 };
#else
extern const SR_UINT32 IDusecStatsWrongDigestValues[];
#endif	/* SNMPPART_DECL */
#define LNusecStatsWrongDigestValues 9
#endif	/* defined(I_usecStatsWrongDigestValues) */


#if defined(I_usecStatsBadPrivacys)
#ifdef SNMPPART_DECL
STdeclare(STusecStatsBadPrivacys, "usecStatsBadPrivacys")
const SR_UINT32 IDusecStatsBadPrivacys[] = { 1, 3, 6, 1, 6, 3, 1135, 2, 4 };
#else
extern const SR_UINT32 IDusecStatsBadPrivacys[];
#endif	/* SNMPPART_DECL */
#define LNusecStatsBadPrivacys 9
#endif	/* defined(I_usecStatsBadPrivacys) */


#if defined(N_usecUser)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecUser[] = { 1, 3, 6, 1, 6, 3, 1135, 3 };
#else
extern const SR_UINT32 IDusecUser[];
#endif	/* SNMPPART_DECL */
#define LNusecUser 8
#endif	/* defined(N_usecUser) */


#if defined(I_userSpinLock)
#ifdef SNMPPART_DECL
STdeclare(STuserSpinLock, "userSpinLock")
const SR_UINT32 IDuserSpinLock[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 1 };
#else
extern const SR_UINT32 IDuserSpinLock[];
#endif	/* SNMPPART_DECL */
#define LNuserSpinLock 9
#endif	/* defined(I_userSpinLock) */


#if defined(I_maxUserNameLength)
#ifdef SNMPPART_DECL
STdeclare(STmaxUserNameLength, "maxUserNameLength")
const SR_UINT32 IDmaxUserNameLength[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 2 };
#else
extern const SR_UINT32 IDmaxUserNameLength[];
#endif	/* SNMPPART_DECL */
#define LNmaxUserNameLength 9
#endif	/* defined(I_maxUserNameLength) */






#if defined(I_userGroupName)
#ifdef SNMPPART_DECL
STdeclare(STuserGroupName, "userGroupName")
const SR_UINT32 IDuserGroupName[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 3 };
#else
extern const SR_UINT32 IDuserGroupName[];
#endif	/* SNMPPART_DECL */
#define LNuserGroupName 11
#endif	/* defined(I_userGroupName) */


#if defined(I_userAuthChange)
#ifdef SNMPPART_DECL
STdeclare(STuserAuthChange, "userAuthChange")
const SR_UINT32 IDuserAuthChange[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 4 };
#else
extern const SR_UINT32 IDuserAuthChange[];
#endif	/* SNMPPART_DECL */
#define LNuserAuthChange 11
#endif	/* defined(I_userAuthChange) */


#if defined(I_userPrivChange)
#ifdef SNMPPART_DECL
STdeclare(STuserPrivChange, "userPrivChange")
const SR_UINT32 IDuserPrivChange[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 5 };
#else
extern const SR_UINT32 IDuserPrivChange[];
#endif	/* SNMPPART_DECL */
#define LNuserPrivChange 11
#endif	/* defined(I_userPrivChange) */


#if defined(I_userNovel)
#ifdef SNMPPART_DECL
STdeclare(STuserNovel, "userNovel")
const SR_UINT32 IDuserNovel[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 6 };
#else
extern const SR_UINT32 IDuserNovel[];
#endif	/* SNMPPART_DECL */
#define LNuserNovel 11
#endif	/* defined(I_userNovel) */


#if defined(I_userTransportLabel)
#ifdef SNMPPART_DECL
STdeclare(STuserTransportLabel, "userTransportLabel")
const SR_UINT32 IDuserTransportLabel[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 7 };
#else
extern const SR_UINT32 IDuserTransportLabel[];
#endif	/* SNMPPART_DECL */
#define LNuserTransportLabel 11
#endif	/* defined(I_userTransportLabel) */


#if defined(I_userCloneFrom)
#ifdef SNMPPART_DECL
STdeclare(STuserCloneFrom, "userCloneFrom")
const SR_UINT32 IDuserCloneFrom[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 8 };
#else
extern const SR_UINT32 IDuserCloneFrom[];
#endif	/* SNMPPART_DECL */
#define LNuserCloneFrom 11
#endif	/* defined(I_userCloneFrom) */


#if defined(I_userMemoryType)
#ifdef SNMPPART_DECL
STdeclare(STuserMemoryType, "userMemoryType")
const SR_UINT32 IDuserMemoryType[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 9 };
#else
extern const SR_UINT32 IDuserMemoryType[];
#endif	/* SNMPPART_DECL */
#define LNuserMemoryType 11
#endif	/* defined(I_userMemoryType) */


#if defined(I_userStatus)
#ifdef SNMPPART_DECL
STdeclare(STuserStatus, "userStatus")
const SR_UINT32 IDuserStatus[] = { 1, 3, 6, 1, 6, 3, 1135, 3, 3, 1, 10 };
#else
extern const SR_UINT32 IDuserStatus[];
#endif	/* SNMPPART_DECL */
#define LNuserStatus 11
#endif	/* defined(I_userStatus) */


#if defined(N_usecMIBConformance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBConformance[] = { 1, 3, 6, 1, 6, 3, 1135, 4 };
#else
extern const SR_UINT32 IDusecMIBConformance[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBConformance 8
#endif	/* defined(N_usecMIBConformance) */


#if defined(N_usecMIBCompliances)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBCompliances[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 1 };
#else
extern const SR_UINT32 IDusecMIBCompliances[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBCompliances 9
#endif	/* defined(N_usecMIBCompliances) */


#if defined(N_usecMIBNoAuthCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBNoAuthCompliance[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 1, 1 };
#else
extern const SR_UINT32 IDusecMIBNoAuthCompliance[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBNoAuthCompliance 10
#endif	/* defined(N_usecMIBNoAuthCompliance) */


#if defined(N_usecMIBAuthCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBAuthCompliance[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 1, 2 };
#else
extern const SR_UINT32 IDusecMIBAuthCompliance[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBAuthCompliance 10
#endif	/* defined(N_usecMIBAuthCompliance) */


#if defined(N_usecMIBPrivCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBPrivCompliance[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 1, 3 };
#else
extern const SR_UINT32 IDusecMIBPrivCompliance[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBPrivCompliance 10
#endif	/* defined(N_usecMIBPrivCompliance) */


#if defined(N_usecMIBGroups)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecMIBGroups[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 2 };
#else
extern const SR_UINT32 IDusecMIBGroups[];
#endif	/* SNMPPART_DECL */
#define LNusecMIBGroups 9
#endif	/* defined(N_usecMIBGroups) */


#if defined(N_usecNoAuthGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecNoAuthGroup[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 2, 1 };
#else
extern const SR_UINT32 IDusecNoAuthGroup[];
#endif	/* SNMPPART_DECL */
#define LNusecNoAuthGroup 10
#endif	/* defined(N_usecNoAuthGroup) */


#if defined(N_usecAuthGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecAuthGroup[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 2, 2 };
#else
extern const SR_UINT32 IDusecAuthGroup[];
#endif	/* SNMPPART_DECL */
#define LNusecAuthGroup 10
#endif	/* defined(N_usecAuthGroup) */


#if defined(N_usecPrivGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDusecPrivGroup[] = { 1, 3, 6, 1, 6, 3, 1135, 4, 2, 3 };
#else
extern const SR_UINT32 IDusecPrivGroup[];
#endif	/* SNMPPART_DECL */
#define LNusecPrivGroup 10
#endif	/* defined(N_usecPrivGroup) */


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_V2PART_H */
