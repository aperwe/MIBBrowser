/*
 *
 * Copyright (C) 1992-1998 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o v2 -test_and_incr -parser -row_status -userpart -storage_type 
 * -ansi 
 */

/* $Id: v2type.h,v 1.6 1998/01/07 22:04:30 mark Exp $ */

/*
 * File Description:
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_V2TYPE_H
#define SR_V2TYPE_H


#ifdef __cplusplus
extern "C" {
#endif

#include "snmpv2s/userpart.h"


/*
 * The srCommunityEntry family. 
 */


typedef
struct _srCommunityEntry_t {
        OctetString     *srCommunityAuthSnmpID;
        OctetString     *srCommunityName;
        OctetString     *srCommunityGroupName;
        OctetString     *srCommunityContextSnmpID;
        OctetString     *srCommunityContextName;
        OctetString     *srCommunityTransportLabel;
        SR_INT32        srCommunityMemoryType;
        SR_INT32        srCommunityStatus;
        long            RowStatusTimerId;
#ifdef U_srCommunityEntry
U_srCommunityEntry
#endif /* U_srCommunityEntry */
        char            valid[2];
} srCommunityEntry_t;



/*
 * The v2AdminSnmpScalars family. 
 */


typedef
struct _v2AdminSnmpScalars_t {
        OctetString     *snmpID;
        SR_INT32        snmpMaxMessageSize;
        SR_INT32        maxIdentityNameLength;
        SR_INT32        maxGroupNameLength;
        SR_INT32        maxV2ContextNameLength;
        SR_INT32        maxViewTreeNameLength;
        SR_INT32        maxTransportLabelLength;
#ifdef U_v2AdminSnmpScalars
U_v2AdminSnmpScalars
#endif /* U_v2AdminSnmpScalars */
        char            valid[1];
} v2AdminSnmpScalars_t;



/*
 * The v2AdminStats family. 
 */


typedef
struct _v2AdminStats_t {
        SR_UINT32       v2AdminStatsUnknownSPIs;
        SR_UINT32       v2AdminStatsUnknownContexts;
        SR_UINT32       v2AdminStatsUnavailableContexts;
        SR_UINT32       v2AdminStatsCacheMisses;
#ifdef U_v2AdminStats
U_v2AdminStats
#endif /* U_v2AdminStats */
        char            valid[1];
} v2AdminStats_t;



/*
 * The v2ContextEntry family. 
 */


typedef
struct _v2ContextEntry_t {
        OctetString     *v2ContextSnmpID;
        OctetString     *v2ContextName;
        OctetString     *v2ContextLocalEntity;
        SR_INT32        v2ContextLocalTime;
        SR_INT32        v2ContextMemoryType;
        SR_INT32        v2ContextStatus;
        long            RowStatusTimerId;
#ifdef U_v2ContextEntry
U_v2ContextEntry
#endif /* U_v2ContextEntry */
        char            valid[1];
} v2ContextEntry_t;


void k_v2ContextEntryCloneUserpartData (v2ContextEntry_t *dst, v2ContextEntry_t *src);

/*
 * The v2AdminViewTree family. 
 */


typedef
struct _v2AdminViewTree_t {
        SR_INT32        viewTreeSpinLock;
#ifdef U_v2AdminViewTree
U_v2AdminViewTree
#endif /* U_v2AdminViewTree */
        char            valid[1];
} v2AdminViewTree_t;



/*
 * The viewTreeEntry family. 
 */


typedef
struct _viewTreeEntry_t {
        OctetString     *viewTreeName;
        OID             *viewTreeSubTree;
        OctetString     *viewTreeMask;
        SR_INT32        viewTreeType;
        SR_INT32        viewTreeMemoryType;
        SR_INT32        viewTreeStatus;
        long            RowStatusTimerId;
#ifdef U_viewTreeEntry
U_viewTreeEntry
#endif /* U_viewTreeEntry */
        char            valid[1];
} viewTreeEntry_t;


void k_viewTreeEntryCloneUserpartData (viewTreeEntry_t *dst, viewTreeEntry_t *src);

/*
 * The v2AdminAccessControl family. 
 */


typedef
struct _v2AdminAccessControl_t {
        SR_INT32        acSpinLock;
#ifdef U_v2AdminAccessControl
U_v2AdminAccessControl
#endif /* U_v2AdminAccessControl */
        char            valid[1];
} v2AdminAccessControl_t;



/*
 * The acEntry family. 
 */


typedef
struct _acEntry_t {
        SR_INT32        acSPI;
        OctetString     *acGroupName;
        OctetString     *acContextName;
        OctetString     *acContextNameMask;
        SR_INT32        acPrivs;
        OctetString     *acReadViewName;
        OctetString     *acWriteViewName;
        SR_INT32        acMemoryType;
        SR_INT32        acStatus;
        long            RowStatusTimerId;
#ifdef U_acEntry
U_acEntry
#endif /* U_acEntry */
        char            valid[2];
} acEntry_t;


void k_acEntryCloneUserpartData (acEntry_t *dst, acEntry_t *src);

/*
 * The v2AdminTransport family. 
 */


typedef
struct _v2AdminTransport_t {
        SR_INT32        transportSpinLock;
#ifdef U_v2AdminTransport
U_v2AdminTransport
#endif /* U_v2AdminTransport */
        char            valid[1];
} v2AdminTransport_t;



/*
 * The transportEntry family. 
 */


typedef
struct _transportEntry_t {
        OctetString     *transportLabel;
        SR_INT32        transportSubindex;
        OID             *transportDomain;
        OctetString     *transportAddress;
        OctetString     *transportReceiveMask;
        SR_INT32        transportMMS;
        SR_INT32        transportMemoryType;
        SR_INT32        transportStatus;
        long            RowStatusTimerId;
#ifdef U_transportEntry
U_transportEntry
#endif /* U_transportEntry */
        char            valid[2];
} transportEntry_t;



/*
 * The v2AdminNotify family. 
 */


typedef
struct _v2AdminNotify_t {
        SR_INT32        notifySpinLock;
#ifdef U_v2AdminNotify
U_v2AdminNotify
#endif /* U_v2AdminNotify */
        char            valid[1];
} v2AdminNotify_t;



/*
 * The notifyEntry family. 
 */


typedef
struct _notifyEntry_t {
        SR_INT32        notifyIndex;
        SR_INT32        notifySPI;
        OctetString     *notifyIdentityName;
        OctetString     *notifyTransportLabel;
        OctetString     *notifyContextName;
        OctetString     *notifyViewName;
        SR_INT32        notifyMemoryType;
        SR_INT32        notifyStatus;
        SR_INT32        notifyConfirm;
        OctetString     *notifyAuthSnmpID;
        SR_INT32        notifyTimeout;
        SR_INT32        notifyMaxRetry;
        long            RowStatusTimerId;
#ifdef U_notifyEntry
U_notifyEntry
#endif /* U_notifyEntry */
        char            valid[2];
} notifyEntry_t;

#define notifyInformParametersEntry_t notifyEntry_t



/*
 * The proxyForwardingEntry family. 
 */


typedef
struct _proxyForwardingEntry_t {
        SR_INT32        proxyIndex;
        SR_INT32        proxyType;
        SR_INT32        proxySPIIn;
        OctetString     *proxyAuthSnmpIDIn;
        OctetString     *proxyIdentityNameIn;
        OctetString     *proxyContextSnmpIDIn;
        OctetString     *proxyContextNameIn;
        SR_INT32        proxySPIOut;
        OctetString     *proxyIdentityNameOut;
        OctetString     *proxyTransportLabelOut;
        SR_INT32        proxyMemoryType;
        SR_INT32        proxyStatus;
        long            RowStatusTimerId;
#ifdef U_proxyForwardingEntry
U_proxyForwardingEntry
#endif /* U_proxyForwardingEntry */
        char            valid[2];
} proxyForwardingEntry_t;



/*
 * The usecScalars family. 
 */


typedef
struct _usecScalars_t {
        SR_INT32        snmpBoots;
        SR_INT32        snmpTime;
#ifdef U_usecScalars
U_usecScalars
#endif /* U_usecScalars */
        char            valid[1];
} usecScalars_t;



/*
 * The usecStats family. 
 */


typedef
struct _usecStats_t {
        SR_UINT32       usecStatsNotInTimeWindows;
        SR_UINT32       usecStatsUnknownUserNames;
        SR_UINT32       usecStatsWrongDigestValues;
        SR_UINT32       usecStatsBadPrivacys;
#ifdef U_usecStats
U_usecStats
#endif /* U_usecStats */
        char            valid[1];
} usecStats_t;



/*
 * The usecUser family. 
 */


typedef
struct _usecUser_t {
        SR_INT32        userSpinLock;
        SR_INT32        maxUserNameLength;
#ifdef U_usecUser
U_usecUser
#endif /* U_usecUser */
        char            valid[1];
} usecUser_t;



/*
 * The userNameEntry family. 
 */


typedef
struct _userNameEntry_t {
        OctetString     *userAuthSnmpID;
        OctetString     *userName;
        OctetString     *userGroupName;
        OctetString     *userAuthChange;
        OctetString     *userPrivChange;
        OctetString     *userNovel;
        OctetString     *userTransportLabel;
        OID             *userCloneFrom;
        SR_INT32        userMemoryType;
        SR_INT32        userStatus;
        long            RowStatusTimerId;
#ifdef U_userNameEntry
U_userNameEntry
#endif /* U_userNameEntry */
        char            valid[2];
} userNameEntry_t;

void k_userNameEntryCloneUserpartData (userNameEntry_t *dst, userNameEntry_t *src);


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_V2TYPE_H */
